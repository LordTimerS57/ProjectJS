{"ast":null,"code":"async function fetchClients() {\n  try {\n    const response = await fetch(\"http://localhost:5000/bank\");\n    if (!response.ok) {\n      throw new Error(\"Erreur lors de la récupération des données\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    return null;\n  }\n}\n;\nasync function Add(numcompte, nom, solde) {\n  try {\n    const response = await fetch('http://localhost:5000/bank/add', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        numcompte,\n        nom,\n        solde\n      })\n    });\n    const data = await response.json(); // Lire la réponse du serveur\n\n    if (response.ok) {\n      alert(\"Client ajouté avec succès\");\n      return true;\n    } else {\n      alert(\"Erreur : \" + (data.error || \"Impossible d'ajouter le client\"));\n      return false;\n    }\n  } catch (error) {\n    console.error(\"Erreur Fetch :\", error);\n    alert(\"Une erreur réseau s'est produite.\");\n    return false;\n  }\n}\n_c = Add;\nasync function Edit(id, nom, solde) {\n  try {\n    const response = await fetch(`http://localhost:5000/bank/update/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        nom,\n        solde\n      })\n    });\n    const data = await response.json();\n    if (response.ok) {\n      alert(\"Client modifié avec succès\");\n      return true;\n    } else {\n      alert(\"Erreur : \" + (data.error || \"Impossible de modifier le client\"));\n      return false;\n    }\n  } catch (error) {\n    console.error(\"Erreur Fetch :\", error);\n    alert(\"Une erreur réseau s'est produite.\");\n    return false;\n  }\n}\n_c2 = Edit;\nasync function Delete(id) {\n  try {\n    const response = await fetch(`http://localhost:5000/bank/delete/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    if (response.ok) {\n      alert(\"Client supprimé avec succès\");\n      return true;\n    } else {\n      alert(\"Erreur : \" + (data.error || \"Impossible de supprimer le client\"));\n      return false;\n    }\n  } catch (error) {\n    console.error(\"Erreur Fetch :\", error);\n    alert(\"Une erreur réseau s'est produite.\");\n    return false;\n  }\n}\n_c3 = Delete;\nexport { fetchClients, Add, Edit, Delete };\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Add\");\n$RefreshReg$(_c2, \"Edit\");\n$RefreshReg$(_c3, \"Delete\");","map":{"version":3,"names":["fetchClients","response","fetch","ok","Error","data","json","error","console","Add","numcompte","nom","solde","method","headers","body","JSON","stringify","alert","_c","Edit","id","_c2","Delete","_c3","$RefreshReg$"],"sources":["C:/Users/Ainar/OneDrive/Desktop/Projet_JS/front/src/Template/APIClient.js"],"sourcesContent":["async function fetchClients() {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/bank\");\r\n      if (!response.ok) {\r\n        throw new Error(\"Erreur lors de la récupération des données\");\r\n      }\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n      return null;\r\n    }\r\n};\r\nasync function Add(numcompte, nom, solde) {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/bank/add', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ numcompte, nom, solde })\r\n    });\r\n    \r\n    const data = await response.json(); // Lire la réponse du serveur\r\n\r\n    if (response.ok) {\r\n      alert(\"Client ajouté avec succès\");\r\n      return true;\r\n    } else {\r\n      alert(\"Erreur : \" + (data.error || \"Impossible d'ajouter le client\"));\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    \r\n    console.error(\"Erreur Fetch :\", error);\r\n    alert(\"Une erreur réseau s'est produite.\");\r\n    return false;\r\n\r\n  }\r\n\r\n}\r\n\r\nasync function Edit(id, nom, solde) {\r\n  try {\r\n    const response = await fetch(`http://localhost:5000/bank/update/${id}`, {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ nom, solde })\r\n    });\r\n\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      alert(\"Client modifié avec succès\");\r\n      return true;\r\n    } else {\r\n      alert(\"Erreur : \" + (data.error || \"Impossible de modifier le client\"));\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Erreur Fetch :\", error);\r\n    alert(\"Une erreur réseau s'est produite.\");\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function Delete(id) {\r\n  try {\r\n    const response = await fetch(`http://localhost:5000/bank/delete/${id}`, {\r\n      method: 'DELETE',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      alert(\"Client supprimé avec succès\");\r\n      return true;\r\n    } else {\r\n      alert(\"Erreur : \" + (data.error || \"Impossible de supprimer le client\"));\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Erreur Fetch :\", error);\r\n    alert(\"Une erreur réseau s'est produite.\");\r\n    return false;\r\n  }\r\n}\r\n\r\n\r\nexport { fetchClients , Add , Edit , Delete };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}